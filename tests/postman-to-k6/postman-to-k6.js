// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import URI from "./libs/urijs.js";
import OAuth from "./libs/oauth-1.0a.js";
import { group } from "k6";
import { hmac } from "k6/crypto";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  group("Auth: Digest", function() {
    postman[Request]({
      name: "DigestAuth Request",
      id: "22dfdedc-fd52-4e0b-ba6b-86daa2657c43",
      method: "GET",
      address: "https://postman-echo.com/digest-auth",
      post(response) {
        tests["response code is 401"] = responseCode.code === 401;
        tests[
          "response has WWW-Authenticate header"
        ] = postman.getResponseHeader("WWW-Authenticate");

        var authenticateHeader = postman.getResponseHeader("WWW-Authenticate"),
          realmStart =
            authenticateHeader.indexOf(
              '"',
              authenticateHeader.indexOf("realm")
            ) + 1,
          realmEnd = authenticateHeader.indexOf('"', realmStart),
          realm = authenticateHeader.slice(realmStart, realmEnd),
          nonceStart =
            authenticateHeader.indexOf(
              '"',
              authenticateHeader.indexOf("nonce")
            ) + 1,
          nonceEnd = authenticateHeader.indexOf('"', nonceStart),
          nonce = authenticateHeader.slice(nonceStart, nonceEnd);

        postman.setGlobalVariable("echo_digest_realm", realm);
        postman.setGlobalVariable("echo_digest_nonce", nonce);
      }
    });

    postman[Request]({
      name: "DigestAuth Success",
      id: "ecc073c5-5fa8-47d6-ad1b-ce33efc09c78",
      method: "GET",
      address: "https://postman-echo.com/digest-auth",
      headers: {
        Authorization:
          'Digest username="postman", realm="Users", nonce="ni1LiL0O37PRRhofWdCLmwFsnEtH1lew", uri="/digest-auth", response="254679099562cf07df9b6f5d8d15db44", opaque=""'
      },
      post(response) {
        tests["response code is 200"] = responseCode.code === 200;
        tests["body contains authenticated"] = responseBody.has(
          "authenticated"
        );
      },
      auth(config, Var) {
        const address = new URI(config.address);
        address.username("postman");
        address.password("password");
        config.address = address.toString();
        config.options.auth = "digest";
      }
    });
  });

  group("Auth: Others", function() {
    postman[Request]({
      name: "Basic Auth",
      id: "887c1756-43ab-4f96-8b2c-cfd4a9423dcd",
      method: "GET",
      address: "https://postman-echo.com/basic-auth",
      headers: {
        Authorization: "Basic cG9zdG1hbjpwYXNzd29yZA=="
      },
      post(response) {
        tests["response code is 200"] = responseCode.code === 200;
        tests["Body contains authenticated"] = responseBody.has(
          "authenticated"
        );
      },
      auth(config, Var) {
        const address = new URI(config.address);
        address.username("postman");
        address.password("password");
        config.address = address.toString();
        config.options.auth = "basic";
      }
    });

    postman[Request]({
      name: "OAuth1.0 Verify Signature",
      id: "150b4a5f-434e-46d6-bbdf-6cf775a3e9d8",
      method: "GET",
      address: "https://postman-echo.com/oauth1",
      post(response) {
        tests["response code is 200"] = responseCode.code === 200;
        var body = JSON.parse(responseBody);
        tests["Body contains status pass"] = body["status"] == "pass";
      },
      auth(config, Var) {
        const options = {
          consumer: {
            key: "RKCGzna7bv9YD57c",
            secret: "D+EdQ-gs$-%@2Nu7"
          },
          signature_method: "HMAC-SHA1",
          hash_function(data, key) {
            return hmac("sha1", key, data, "base64");
          },
          version: "1.0"
        };
        const request = {
          method: config.method,
          url: config.address,
          data: {
            oauth_timestamp: 1472121255,
            oauth_nonce: "e5VR16"
          }
        };
        const oauth = OAuth(options);
        const auth = oauth.toHeader(oauth.authorize(request));
        Object.assign(config.headers, auth);
      }
    });

    postman[Request]({
      name: "Hawk Auth",
      id: "92e99201-60e3-4f35-a7ea-17008c475799",
      method: "GET",
      address: "https://postman-echo.com/auth/hawk",
      post(response) {
        tests["Status code is 200"] = responseCode.code === 200;
        /* Note: hawk authentication not supported */
      }
    });
  });

  group("Cookies", function() {
    postman[Request]({
      name: "Set Cookies",
      id: "a213a69d-203f-420f-b041-6a30fa2f5822",
      method: "GET",
      address: "https://postman-echo.com/cookies/set?foo1=bar1&foo2=bar2",
      post(response) {
        // handle case where it is 304

        if (responseCode.code === 200) {
          tests["Status code is 302 or 200"] = true;
          tests["Body contains cookies"] = responseBody.has("cookies");

          var body = JSON.parse(responseBody);
          tests["Body contains cookie foo1"] = "foo1" in body.cookies;
          tests["Body contains cookie foo2"] = "foo2" in body.cookies;
        } else if (responseCode.code === 302) {
          tests["Status code is 302 or 200"] = true;
          tests["Body has redirection message"] = responseBody.has(
            "Found. Redirecting to /cookies"
          );
        } else {
          tests["Status code is 302 or 200"] = false;
        }

        tests["foo1 cookie is set"] =
          _.get(postman.getResponseCookie("foo1"), "value") === "bar1";

        tests["foo2 cookie is set"] =
          _.get(postman.getResponseCookie("foo2"), "value") === "bar2";
      }
    });

    postman[Request]({
      name: "Get Cookies",
      id: "969253a2-9108-44e7-974d-94b6e228f5f4",
      method: "GET",
      address: "https://postman-echo.com/cookies",
      post(response) {
        var responseJSON;
        try {
          tests["Body contains cookies"] = responseBody.has("cookies");
          responseJSON = JSON.parse(responseBody);
          tests["Cookies object is empty"] =
            Object.keys(responseJSON.cookies).length > 0;
        } catch (e) {}

        tests["Status code is 200"] = responseCode.code === 200;
      }
    });

    postman[Request]({
      name: "Delete Cookies",
      id: "f014ddb5-7807-4b87-8a17-584ccdfe3485",
      method: "GET",
      address: "https://postman-echo.com/cookies/delete?foo1=&foo2=",
      post(response) {
        // handle case where it is 304

        if (responseCode.code === 200) {
          tests["Status code is 302 or 200"] = true;
          tests["Body contains cookies"] = responseBody.has("cookies");

          var body = JSON.parse(responseBody);
          tests["Body contains cookie foo1"] = "foo1" in body.cookies;
          tests["Body contains cookie foo2"] = "foo2" in body.cookies;
        } else if (responseCode.code === 302) {
          tests["Status code is 302 or 200"] = true;
          tests["Body has redirection message"] = responseBody.has(
            "Found. Redirecting to /cookies"
          );
        } else {
          tests["Status code is 302 or 200"] = false;
        }

        tests["foo1 cookie is set"] =
          _.get(postman.getResponseCookie("foo1"), "value") === undefined;

        tests["foo2 cookie is set"] =
          _.get(postman.getResponseCookie("foo2"), "value") === undefined;
      }
    });
  });

  group("Headers", function() {
    postman[Request]({
      name: "Request Headers",
      id: "c6a10114-3359-47c3-a704-15ace713eaab",
      method: "GET",
      address: "https://postman-echo.com/headers",
      headers: {
        "my-sample-header": "Lorem ipsum dolor sit amet"
      },
      post(response) {
        var responseJSON;
        try {
          tests["Body contains headers"] = responseBody.has("headers");
          responseJSON = JSON.parse(responseBody);
          tests["Header contains host"] = "host" in responseJSON.headers;
          tests[
            "Header contains test parameter sent as part of request header"
          ] = "my-sample-header" in responseJSON.headers;
        } catch (e) {}
      }
    });

    postman[Request]({
      name: "Response Headers",
      id: "b18d3157-ae60-4272-8f9d-1e40c05f9a4b",
      method: "GET",
      address:
        "https://postman-echo.com/response-headers?Content-Type=text/html&test=response_headers",
      post(response) {
        tests["Body contains Content-Type"] = responseBody.has("Content-Type");
        tests["response headers have key sent as part of request"] =
          postman.getResponseHeader("test") == "response_headers";
      }
    });
  });

  group("Request Methods", function() {
    postman[Request]({
      name: "GET Request",
      id: "971f8775-6ab6-413c-a054-73c2fd2a1ec4",
      method: "GET",
      address: "https://postman-echo.com/get?test=123",
      post(response) {
        var responseJSON;

        try {
          responseJSON = JSON.parse(responseBody);
          tests["response is valid JSON"] = true;
        } catch (e) {
          responseJSON = {};
          tests["response is valid JSON"] = false;
        }

        tests["response json contains headers"] = _.has(
          responseJSON,
          "headers"
        );
        tests["response json contains args"] = _.has(responseJSON, "args");
        tests["response json contains url"] = _.has(responseJSON, "url");

        tests["args key contains argument passed as url parameter"] =
          "test" in responseJSON.args;
        tests['args passed via request url params has value "123"'] =
          _.get(responseJSON, "args.test") === "123";
      }
    });

    postman[Request]({
      name: "POST Raw Text",
      id: "97e6e383-35dc-48b0-a42d-f3b10bf789e9",
      method: "POST",
      address: "https://postman-echo.com/post",
      data:
        "Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium. Praesent neque quam, tincidunt nec leo eget, rutrum vehicula magna.\nMaecenas consequat elementum elit, id semper sem tristique et. Integer pulvinar enim quis consectetur interdum volutpat.",
      headers: {
        "Content-Type": "text/plain"
      },
      post(response) {
        var responseJSON;

        try {
          responseJSON = JSON.parse(responseBody);
          tests["response is valid JSON"] = true;
        } catch (e) {
          responseJSON = {};
          tests["response is valid JSON"] = false;
        }

        tests["response has post data"] = _.has(responseJSON, "data");
        tests["response matches the data posted"] =
          responseJSON.data && responseJSON.data.length === 256;

        tests["content-type equals text/plain"] =
          responseJSON &&
          responseJSON.headers &&
          responseJSON.headers["content-type"] === "text/plain";
      }
    });

    postman[Request]({
      name: "POST Form Data",
      id: "8cc57210-0c66-48ff-a885-70f32507c048",
      method: "POST",
      address: "https://postman-echo.com/post",
      data: {
        strange: "boom"
      },
      headers: {
        "Content-Type": "application/x-www-form-urlencoded"
      },
      post(response) {
        var responseJSON;

        try {
          responseJSON = JSON.parse(responseBody);
          tests["response is valid JSON"] = true;
        } catch (e) {
          responseJSON = {};
          tests["response is valid JSON"] = false;
        }

        tests["response has post data"] = _.has(responseJSON, "form");
        tests["response matches the data posted"] =
          responseJSON.form && responseJSON.form.strange === "boom";
      }
    });

    postman[Request]({
      name: "PUT Request",
      id: "509b9c1a-a808-4514-a2f6-a6563a37e689",
      method: "PUT",
      address: "https://postman-echo.com/put",
      data:
        "Etiam mi lacus, cursus vitae felis et, blandit pellentesque neque. Vestibulum eget nisi a tortor commodo dignissim.\nQuisque ipsum ligula, faucibus a felis a, commodo elementum nisl. Mauris vulputate sapien et tincidunt viverra. Donec vitae velit nec metus.",
      post(response) {
        var responseJSON;

        try {
          responseJSON = JSON.parse(responseBody);
          tests["response is valid JSON"] = true;
        } catch (e) {
          responseJSON = {};
          tests["response is valid JSON"] = false;
        }

        tests["response has PUT data"] = _.has(responseJSON, "data");
        tests["response matches the data sent in request"] =
          responseJSON.data && responseJSON.data.length === 256;
      }
    });

    postman[Request]({
      name: "PATCH Request",
      id: "a9003c05-728c-4b76-8ceb-282aaa8cb361",
      method: "PATCH",
      address: "https://postman-echo.com/patch",
      data:
        "Curabitur auctor, elit nec pulvinar porttitor, ex augue condimentum enim, eget suscipit urna felis quis neque.\nSuspendisse sit amet luctus massa, nec venenatis mi. Suspendisse tincidunt massa at nibh efficitur fringilla. Nam quis congue mi. Etiam volutpat.",
      post(response) {
        var responseJSON;

        try {
          responseJSON = JSON.parse(responseBody);
          tests["response is valid JSON"] = true;
        } catch (e) {
          responseJSON = {};
          tests["response is valid JSON"] = false;
        }

        tests["response has PUT data"] = _.has(responseJSON, "data");
        tests["response matches the data sent in request"] =
          responseJSON.data && responseJSON.data.length === 256;
      }
    });

    postman[Request]({
      name: "DELETE Request",
      id: "d9c0f0fe-bd1b-45f2-84d3-a8faae5bfd9c",
      method: "DELETE",
      address: "https://postman-echo.com/delete",
      data:
        "Donec fermentum, nisi sed cursus eleifend, nulla tortor ultricies tellus, ut vehicula orci arcu ut velit. In volutpat egestas dapibus.\nMorbi condimentum vestibulum sapien. Etiam dignissim diam quis eros lobortis gravida vel lobortis est. Etiam gravida sed.",
      post(response) {
        var responseJSON;

        try {
          responseJSON = JSON.parse(responseBody);
          tests["response is valid JSON"] = true;
        } catch (e) {
          responseJSON = {};
          tests["response is valid JSON"] = false;
        }

        tests["response has PUT data"] = _.has(responseJSON, "data");
        tests["response matches the data sent in request"] =
          responseJSON.data && responseJSON.data.length === 256;
      }
    });
  });

  group("Utilities", function() {
    postman[Request]({
      name: "Response Status Code",
      id: "ae7252c5-fff6-49ed-b1ff-b2145fe1ba16",
      method: "GET",
      address: "https://postman-echo.com/status/200",
      post(response) {
        var responseJSON;
        try {
          responseJSON = JSON.parse(responseBody);
          tests["Status equals 200"] = responseJSON.status === 200;
        } catch (e) {}
        tests["Body contains status"] = responseBody.has("status");
      }
    });

    postman[Request]({
      name: "Streamed Response",
      id: "fe323c2e-9087-45c5-8996-ef793ff16e76",
      method: "GET",
      address: "https://postman-echo.com/stream/10",
      post(response) {
        tests["response code is 200"] = responseCode.code === 200;
        tests["response is sent in chunks"] =
          postman.getResponseHeader("Transfer-Encoding") === "chunked";
      }
    });

    postman[Request]({
      name: "Delay Response",
      id: "01bf060d-ceff-4adb-b383-771e731f3a62",
      method: "GET",
      address: "https://postman-echo.com/delay/3",
      post(response) {
        var responseJSON;
        try {
          responseJSON = JSON.parse(responseBody);
          tests["response body has key delay"] = "delay" in responseJSON;
        } catch (e) {}
        tests["response code is 200"] = responseCode.code === 200;
      }
    });

    postman[Request]({
      name: "Get UTF8 Encoded Response",
      id: "5de6fd21-401f-4ca3-83b6-9ccacffbc9af",
      method: "GET",
      address: "https://postman-echo.com/encoding/utf8",
      post(response) {
        tests["response code is 200"] = responseCode.code === 200;
      }
    });

    postman[Request]({
      name: "GZip Compressed Response",
      id: "fd179462-3067-43ad-9372-f3fcc49573d9",
      method: "GET",
      address: "https://postman-echo.com/gzip",
      post(response) {
        try {
          var data = JSON.parse(responseBody);
          tests["Body contains gzipped"] = responseBody.has("gzipped");
          tests["Body contains headers"] = responseBody.has("headers");
          tests["Body contains method"] = responseBody.has("method");
        } catch (e) {
          console.log("Cannot parse response,probably not a JSON");
        }
        tests["response code is 200"] = responseCode.code === 200;
      }
    });

    postman[Request]({
      name: "Deflate Compressed Response",
      id: "7621ba9e-f10c-42cd-a5be-d58ee6ff7446",
      method: "GET",
      address: "https://postman-echo.com/deflate",
      post(response) {
        tests["response code is 200"] = responseCode.code === 200;

        try {
          var data = JSON.parse(responseBody);
          tests["Body contains deflated"] = responseBody.has("deflated");
          tests["Body contains headers"] = responseBody.has("headers");
          tests["Body contains method"] = responseBody.has("method");
        } catch (e) {
          console.log("Cannot parse response,probably not a JSON");
        }
      }
    });

    postman[Request]({
      name: "IP address in JSON format",
      id: "7ff305eb-fe73-4dcf-a8a7-6fc149c91e1e",
      method: "GET",
      address: "https://postman-echo.com/ip",
      post(response) {
        var body = JSON.parse(responseBody);

        tests["Status code is 200"] = responseCode.code === 200;
        tests["Valid response structure"] = /^[a-fA-F:\.0-9]+$/.test(body.ip);
      }
    });
  });

  group("Utilities / Date and Time", function() {
    postman[Request]({
      name: "Current UTC time",
      id: "4ac1db9d-4085-402e-b672-8429bd6dfc7c",
      method: "GET",
      address: "https://postman-echo.com/time/now",
      post(response) {
        tests["Status code is 200"] = responseCode.code === 200;
        tests["Time is in a valid format"] =
          responseBody === postman.getResponseHeader("date");
      }
    });

    postman[Request]({
      name: "Timestamp validity",
      id: "f211ea67-667b-4e34-b71c-3cd7ff6e9ee2",
      method: "GET",
      address: "https://postman-echo.com/time/valid?timestamp=2016-10-10",
      post(response) {
        var validity = JSON.parse(responseBody).valid;

        tests["Status code is 200"] = responseCode.code === 200;
        tests["Timestamp is valid"] = validity === true;
      }
    });

    postman[Request]({
      name: "Format timestamp",
      id: "a488d0aa-daf4-432d-b602-897e859fc7bd",
      method: "GET",
      address:
        "https://postman-echo.com/time/format?timestamp=2016-10-10&format=mm",
      post(response) {
        var format = JSON.parse(responseBody).format;

        tests["Status code is 200"] = responseCode.code === 200;
        tests["Formatted result is valid"] = format === "20";
      }
    });

    postman[Request]({
      name: "Extract timestamp unit",
      id: "bb0434aa-52cc-49d9-9699-3c2a6a35c55e",
      method: "GET",
      address:
        "https://postman-echo.com/time/unit?timestamp=2016-10-10&unit=day",
      post(response) {
        var unit = JSON.parse(responseBody).unit;

        tests["Status code is 200"] = responseCode.code === 200;
        tests["Returned unit is valid"] = unit === 1;
      }
    });

    postman[Request]({
      name: "Time addition",
      id: "5a7dcae0-d1df-4e9a-8d45-d1014ab229e0",
      method: "GET",
      address:
        "https://postman-echo.com/time/add?timestamp=2016-10-10&years=100",
      post(response) {
        var sum = JSON.parse(responseBody).sum;

        tests["Status code is 200"] = responseCode.code === 200;
      }
    });

    postman[Request]({
      name: "Time subtraction",
      id: "e6f1232c-bff0-4000-9d20-7a0b40d9d024",
      method: "GET",
      address:
        "https://postman-echo.com/time/subtract?timestamp=2016-10-10&years=100",
      post(response) {
        var difference = JSON.parse(responseBody).difference;

        tests["Status code is 200"] = responseCode.code === 200;
      }
    });

    postman[Request]({
      name: "Start of time",
      id: "a7f35f0c-dcc1-419e-8a47-d28e8542dba2",
      method: "GET",
      address:
        "https://postman-echo.com/time/start?timestamp=2016-10-10&unit=month",
      post(response) {
        var start = JSON.parse(responseBody).start;

        tests["Status code is 200"] = responseCode.code === 200;
      }
    });

    postman[Request]({
      name: "Object representation",
      id: "29e55543-09bf-4eee-a75c-f3f0a513aa56",
      method: "GET",
      address:
        "https://postman-echo.com/time/start?timestamp=2016-10-10&unit=month",
      post(response) {
        var object = JSON.parse(responseBody);

        tests["Status code is 200"] = responseCode.code === 200;
      }
    });

    postman[Request]({
      name: "Before comparisons",
      id: "d5d236d0-45d4-4bf0-9217-395af115826a",
      method: "GET",
      address:
        "https://postman-echo.com/time/before?timestamp=2016-10-10&target=2017-10-10",
      post(response) {
        var before = JSON.parse(responseBody).before;

        tests["Status code is 200"] = responseCode.code === 200;
        tests["Comparsion was correct"] = before === true;
      }
    });

    postman[Request]({
      name: "After comparisons",
      id: "02546852-e882-45c2-bbed-c84599888821",
      method: "GET",
      address:
        "https://postman-echo.com/time/after?timestamp=2016-10-10&target=2017-10-10",
      post(response) {
        var after = JSON.parse(responseBody).after;

        tests["Status code is 200"] = responseCode.code === 200;
        tests["Comparsion was correct"] = after === false;
      }
    });

    postman[Request]({
      name: "Between timestamps",
      id: "7ce1b9a2-d96e-4098-a5c7-f99049c8c16d",
      method: "GET",
      address:
        "https://postman-echo.com/time/between?timestamp=2016-10-10&start=2017-10-10&end=2019-10-10",
      post(response) {
        var after = JSON.parse(responseBody).after;

        tests["Status code is 200"] = responseCode.code === 200;
        tests["Comparsion was correct"] = after === false;
      }
    });

    postman[Request]({
      name: "Leap year check",
      id: "c139fcb7-ee8c-456b-9210-2fd308b7d086",
      method: "GET",
      address: "https://postman-echo.com/time/leap?timestamp=2016-10-10",
      post(response) {
        tests["Status code is 200"] = responseCode.code === 200;
        tests["Comparsion was correct"] =
          JSON.parse(responseBody).leap === true;
      }
    });
  });

  group("Utilities / Postman Collection", function() {
    postman[Request]({
      name: "Transform collection from format v1 to v2",
      id: "c17a80ff-a433-4675-ad53-294ea6e442ec",
      method: "POST",
      address: "https://postman-echo.com/transform/collection?from=1&to=2",
      data:
        '{\n  "id": "7875be4b-917d-4aff-8cc4-5606c36bf418",\n  "name": "Sample Postman Collection",\n  "description": "A sample collection to demonstrate collections as a set of related requests",\n  "order": [\n    "4d9134be-e8bf-4693-9cd7-1c0fc66ae739",\n    "141ba274-cc50-4377-a59c-e080066f375e",\n    "4511ca8b-0bc7-430f-b894-a7ec1036f322"\n  ],\n  "folders": [],\n  "requests": [\n    {\n      "id": "4d9134be-e8bf-4693-9cd7-1c0fc66ae739",\n      "name": "A simple GET request",\n      "collectionId": "877b9dae-a50e-4152-9b89-870c37216f78",\n      "method": "GET",\n      "headers": "",\n      "data": [],\n      "rawModeData": "",\n      "tests": "tests[\'response code is 200\'] = (responseCode.code === 200);",\n      "preRequestScript": "",\n      "url": "https://postman-echo.com/get?source=newman-sample-github-collection"\n    },\n    {\n      "id": "141ba274-cc50-4377-a59c-e080066f375e",\n      "name": "A simple POST request",\n      "collectionId": "877b9dae-a50e-4152-9b89-870c37216f78",\n      "method": "POST",\n      "headers": "Content-Type: text/plain",\n      "dataMode": "raw",\n      "data": [],\n      "rawModeData": "Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...",\n      "url": "https://postman-echo.com/post"\n    },\n    {\n      "id": "4511ca8b-0bc7-430f-b894-a7ec1036f322",\n      "name": "A simple POST request with JSON body",\n      "collectionId": "877b9dae-a50e-4152-9b89-870c37216f78",\n      "method": "POST",\n      "headers": "Content-Type: application/json",\n      "dataMode": "raw",\n      "data": [],\n      "rawModeData": "{\\"text\\":\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\"}",\n      "url": "https://postman-echo.com/post"\n    }\n  ]\n}',
      headers: {
        "Content-Type": "application/json"
      }
    });

    postman[Request]({
      name: "Transform collection from format v2 to v1",
      id: "2852afcc-57f2-420b-bbda-62667a043e8b",
      method: "POST",
      address: "https://postman-echo.com/transform/collection?from=2&to=1",
      data:
        '{\n  "info": {\n    "name": "Sample Postman Collection",\n    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",\n    "description": "A sample collection to demonstrate collections as a set of related requests"\n  },\n\n  "item": [{\n    "name": "A simple GET request",\n    "event": [{\n      "listen": "test",\n      "script": {\n        "type": "text/javascript",\n        "exec": ["tests[\'response code is 200\'] = (responseCode.code === 200);"]\n      }\n    }],\n    "request": {\n      "url": "https://postman-echo.com/get?source=newman-sample-github-collection",\n      "method": "GET"\n    }\n  }, {\n    "name": "A simple POST request",\n    "request": {\n      "url": "https://postman-echo.com/post",\n      "method": "POST",\n      "header": [{\n        "key": "Content-Type",\n        "value": "text/plain"\n      }],\n      "body": {\n        "mode": "raw",\n        "raw": "Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium..."\n      }\n    }\n  }, {\n    "name": "A simple POST request with JSON body",\n    "request": {\n      "url": "https://postman-echo.com/post",\n      "method": "POST",\n      "header": [{\n        "key": "Content-Type",\n        "value": "application/json"\n      }],\n      "body": {\n        "mode": "raw",\n        "raw": "{\\"text\\":\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\"}"\n      }\n    }\n  }]\n}',
      headers: {
        "Content-Type": "application/json"
      }
    });
  });
}
